import sys

listalf = ["а", "б", "в", "г", "д", "е", "ж", "з", "и", "й", "к", "л", "м", "н", "о", "п", "р", "с", "т", "у", "ф", "х", "ц", "ч", "ш", "щ", "ъ", "ы", "ь", "э", "ю", "я"]
hard_dictionary = {
    "а":"11", "б":"12", "в":"13", "г":"14", "д":"15", "е":"16",
    "ж":"21", "з":"22", "и":"23", "й":"24", "к":"25", "л":"26", 
    "м":"31", "н":"32", "о":"33", "п":"34", "р":"35", "с":"36", 
    "т":"41", "у":"42", "ф":"43", "х":"44", "ц":"45", "ч":"46", 
    "ш":"51", "щ":"52", "ъ":"53", "ы":"54", "ь":"55", "э":"56", 
    "ю":"61", "я":"62"}

def decryption_format(dec_text):
    dec_text = dec_text.replace('тчк', '.')
    dec_text = dec_text.replace('зпт', ',')
    result = ""
    capitalize_next = True
    for char in dec_text:
        if char.isalpha():
            if capitalize_next:
                result += char.upper()
                capitalize_next = False
            else:
                result += char.lower()
        elif char == '.':
            result += char + ' '
            capitalize_next = True
        elif char == ',':
            result += char + ' '
        else: pass
    result[0].upper()
    return result


def Caesar(result_text, operation, answer=""):
    
    shift: int = int(input('Enter shift: '))
    if (shift % len(listalf) == 0 or shift == 0):
        print("Wrong shift!")
        exit()
   
    if (operation == 1):

        for i in range(len(result_text)): answer += (listalf[(listalf.index(result_text[i]) + shift) % 32])

        print("Encrypted text: ", ' '.join(answer[i: i + 5] for i in range(0, len(answer), 5)))
        print()

    else:
        for i in range(len(result_text)): answer += (listalf[(listalf.index(result_text[i]) - shift) % 32])

        result = decryption_format(answer)
        
        print("Decrypted text: ", end=' ')
        for i in result: print(i, end='')
    
    
def ATBASH(result_text, answer=""):

    for i in range(len(result_text)): answer += (listalf[-listalf.index(result_text[i])-1])

    result = decryption_format(answer)
    
    print("Encrypted/decrypted text: ", end=' ')
 
    for i in result: print(i, end='')
    print()

def Polybi_square(result_text, operation, answer = ""):
    
    if operation==1:

        for x in result_text: answer += hard_dictionary.get(x)

        print("Encrypted text: ", ' '.join(answer[i: i + 5] for i in range(0, len(answer), 5)))
        print()

    else:

        list_fraze, step = [], 2

        for i in range(0, len(result_text), 2):
            list_fraze.append(result_text[i:step])
            step += 2

        key_hard_dictionary_list = list(hard_dictionary.keys())
        val_hard_dictionary_list = list(hard_dictionary.values())

        for x in list_fraze: answer += key_hard_dictionary_list[val_hard_dictionary_list.index(x)]

        result = decryption_format(answer)

        print("Decrypted text: ", end=' ')
        for i in result: print(i, end='')
        print()


while True:

    print("""Select a cipher: 
             1.  Caesar
             2.  ATBASH
             3.  Polybi_square
             4.  Exit
        """)
    select: int = int(input())

    if select == 4: 
        exit_flag = 1
        sys.exit()

    if select not in [1, 2, 3, 4]:
        print("Wrong select!")
        continue

    print(""" Select an action: 
                1. Encryption 
                2. Decryption""")
    operation: int = int(input())
    
    text: str = str(input('Enter text: '))
    text_format = str(text.replace(' ', ''))

    for i in range(len(text_format)):

        if text_format.find('.') != -1:
            index = text_format.find('.')
            str1_split1 = text_format[:index]
            str1_split2 = text_format[index+1:]
            text_format = str1_split1 + 'тчк' + str1_split2

        if text_format.find(',') != -1:
            index = text_format.find(',')
            str1_split1 = text_format[:index]
            str1_split2 = text_format[index+1:]
            text_format = str1_split1 + 'зпт' + str1_split2

    if select == 1: 
        Caesar(text_format.lower(), operation)
        print()

    if select == 2: 
        ATBASH(text_format.lower())
        print()

    if select == 3: 
        Polybi_square(text_format.lower(), operation)
        print()

    '''text = "То был год бурь, шпионил неприкрыто Угрюмый росс. Тлел Марс. Шах обезумел. Ланг сделал твой портрет. Потом я умер. Клуб в Крашо заплатил мне за рассказО том, в чем смысл поэзии для нас. Вещал я скучно, но недолго. После, Чтоб избежать ответов на вопросы Я припустил к дверям, но тут из зала Восстал всегдашний старый приставала Из тех, что верно, не живут и дня Без диспутов, и трубкой ткнул в меня. Тут и случилось, транс, упадок сил, Иль прежний приступ. К счастью, в зале был Какой то врач. К его ногам я сник. Казалось, сердце встало. Долгий миг Прошел, пока оно К конечной цели поплелось. Я, право, сам не знаю, что сознанью Продиктовало, я уже за гранью, И все, что я любил, навеки стерто. Молчала неподвижная аорта, Биясь, зашло упругое светило, Кроваво черное ничто взмесило Систему тел, спряженных в глуби тел, Спряженных в глуби тем, там, в темноте Спряженных тоже. Явственно до жути Передо мной ударила из мути Фонтана белоснежного струя. То был поток Не наших атомов, и смысл всей сцены Не нашим был. Ведь разум неизменно Распознает подлог. В осоке птицу, В кривом сучке личинку пяденицы, А в капюшоне кобры очерк крыл Ночницы. Все же то, что заместил, Перцептуально, белый мой фонтан, Мог распознать лишь обитатель стран, Куда забрел я на короткий миг. Но вот истаял он, иссякнул, сник. Еще в бесчувстве, я вернулся снова В земную жизнь."'''

    '''То был год бурь, шпионил неприкрыто 
    Угрюмый росс. Тлел Марс. Шах обезумел.
    Ланг сделал твой портрет. Потом я умер.
    Клуб в Крашо заплатил мне за рассказ
    О том, в чем смысл поэзии для нас.
    Вещал я скучно, но недолго. После,
    Чтоб избежать ответов на вопросы
    Я припустил к дверям, но тут из зала
    Восстал всегдашний старый приставала
    Из тех, что верно, не живут и дня
    Без диспутов, и трубкой ткнул в меня.
    Тут и случилось, транс, упадок сил,
    Иль прежний приступ. К счастью, в зале был
    Какой то врач. К его ногам я сник.
    Казалось, сердце встало. Долгий миг
    Прошел, пока оно
    К конечной цели поплелось.
    Я, право, сам не знаю, что сознанью
    Продиктовало, я уже за гранью,
    И все, что я любил, навеки стерто.
    Молчала неподвижная аорта,
    Биясь, зашло упругое светило,
    Кроваво черное ничто взмесило
    Систему тел, спряженных в глуби тел,
    Спряженных в глуби тем, там, в темноте
    Спряженных тоже. Явственно до жути
    Передо мной ударила из мути
    Фонтана белоснежного струя.
    То был поток
    Не наших атомов, и смысл всей сцены
    Не нашим был. Ведь разум неизменно
    Распознает подлог. В осоке птицу,
    В кривом сучке личинку пяденицы,
    А в капюшоне кобры очерк крыл
    Ночницы. Все же то, что заместил,
    Перцептуально, белый мой фонтан,
    Мог распознать лишь обитатель стран,
    Куда забрел я на короткий миг.
    Но вот истаял он, иссякнул, сник.
    Еще в бесчувстве, я вернулся снова
    В земную жизнь. 1123
    '''
#яыоиш рысоа эйфья еьхыъ хшъть эхчэи яыарэ лщицэ ыююяд чяштш щнэюя дченв ыотфа щтшяд чшнър юстшн шяпыц ьыэяэ тяядч ьыяыщ мащтэ ядччш аопчэ неыфн ьшнях шщътф нэнюю чнфыя ыщфья пдтщю щиюшь ыкфхх сшмън юядчп тжншм ючадъ ыфьяъ ыътсы шрыяд чьыюш тфьяд яыохф отуня йыяпт яыпън пыьэы юимьэ хьаюя хшчсп тэмщф ьяъыя аяхфф ншнпы ююянш пютрс неъхц юянэи цьэхю янпнш нхфят вфьяд яыптэ ъыфья ътухп аяхсъ мотфс хюьая ыпфья хяэао чыцяч ъашпщ тъмяд чяаях юшадх шыюйф ьяяэн ъюфья аьнсы чюхшф ьяхшй ьэтуъ хцьэх юяаья дччюд нюяйл фьяпф нштои шчнчы цяыпэ ндядч чтрыъ ырнщм юъхчя дччнф ншыюй фьяют эсгтп юяншы ядчсы шрхцщ хрьэы етшфь яьычн ыъычч ыътдъ ыцгтш хьыьш тшыюй ядчмф ьяьэн пыфья юнщът фънлф ьядяы юыфън ъйльэ ысхчя ыпншы фьяма утфнр энъйл фьяхп ютфья дяымш лохшф ьяънп тчхюя тэяыя дчщыш дншнъ тьысп хуънм ныэян фьяох мюйфь яфнеш ыаьэа рытюп тяхшы фьячэ ыпнпы дтэъы тъхдя ыпфщт юхшыю хюятщ аятшф ьяюьэ мутъъ ивпрш аохят шфьяю ьэмут ъъивп ршаох ятщфь яянщф ьяпят щъыят юьэму тъъив яыутя дчмпю яптъъ ысыуа яхьтэ тсыщъ ыцасн эхшнх фщаях быъян ънотш ыюъту ъырыю яэамя дчяыо ишьыя ычътъ нехвн яыщып фьяхю щиюшп ютцюг тъиът ънехщ оишяд чптсй энфащ ътхфщ тъъыэ нюьыф ънтяь ысшыр ядчпы юычть яхгаф ьяпчэ хпыщю адчтш хдхъч аьмст ъхгиф ьянпч ньлеы ътчыо эиыдт эччэи шъыдъ хгияд чпюту тяыфь ядяыф нщтюя хшфья ьтэгт ьяанш йъыфь яотши цщыцб ыъянъ фьящы рэнюь ыфъня йшхей ыохян ятшйю яэнъф ьячас нфноэ тшмън чыэыя чхцщх рядчъ ыпыях юянмш ыъфья хююмч ъашфь яюъхч ядчтж тпотю дапюя птфья мптэъ ашюмю ъыпнп фтщъа лухфъ йядч
# Один дурак может больше спрашивать, чем десять умных ответить.
#ычкдф мчнкь щершы бшсчц сфцош щсущд ычьмщ зхдтщ чъъыа уыфоф хйщъы аубйю чкорь хофыа уфйцм ънофй фылчт шчщыщ оыыау шчычх иьхощ ыаууф ьклущ йбчрй шфйыс фхцор йщйъъ уйрчы чхршы лаохъ хдъфш чжрсс нфицй ъыаул овйфи ъуьац чршыц чцонч фмчыа ушчъф оршыа ычкср копйы ечыло ычлцй лчшщч ъдишщ сшьъы сфунл ощихр шыцчы ьысрр йфйлч ъъыйф лъомн йбцст ъыйщд тшщсъ ыйлйф йсрыо юршыа ычлощ цчршы цопсл ьыснц икорн съшьы члршы сыщьк учтыу цьфлх оциыа уыьыс ъфьас фчъер шыыщй цършы ьшйнч уъсфр шысфе шщопц стшщс ъыьшы аууъа йъыез ршылр йфокд фуйуч тычлщ йаыау уомчц чмйхи ъцсуы аууйр йфчъе ршыъо щняол ъыйфч ыаунч фмстх смшщч бофрш ышчуй чцчуу чцоац чтяоф сшчшф офчъе ыауир шышщй лчршы ъйхцо рцйзр шыаыч ъчрцй цезшщ чнсуы члйфч ршыиь порйм щйцез ршысл ъоршы аычиф зксфр шыцйл оусъы ощычы аухчф айфйц ошчнл спцйи йчщый ршыкс иъерш ырйбф чьшщь мчоъл оысфч ршыущ члйлч аощцч оцсаы члрхо ъсфчъ съыох ьыофр шыъшщ ипоцц дюлмф ьксыо фршыъ шщипо ццдюл мфькс ыохрш ыыйхр шылыо хцчыо ъшщип оццдю ычпоы ауилъ ылоцц чнчпь ысшощ ончхц чтьнй щсфйс рхьыс эчцый цйкоф чъцоп цчмчъ ыщьиы ауычк дфшчы чуцоц йбсюй ычхчл ршысъ хдъфл ъотъя оцдцо цйбсх кдфыа улоне щйрьх цосрх оццчщ йъшчр цйоыш чнфчм ыаулч ъчуош ысяьр шылущ слчхъ ьауоф сасцу ьшино цсядр шыйлу йшзбч цоучк щдчао щуущд фцчац сядыа улъоп оычрш ыаычр йхоъы сфршы шощяо шыьйф ецчрш ыкофд тхчтэ чцыйц ршыхч мщйъш чрцйы ефсбе чксый ыофеъ ыщйцр шыуьн йрйкщ офицй учщчы устхс мыауц члчыс ъыйиф чцршы съъиу цьфрш ыъцсу ыауов олкоъ аьлъы лоршы илощц ьфъиъ цчлйл рохць зпсрц еыау
#41331 25426 14331 51242 35552 23441 51342 33332 23263 21634 35232 53554 41334 21435 61315 42435 33363 64146 25412 61626 31113 53641 46255 11144 33121 62242 31162 64146 25261 13214 36151 62611 26411 33324 34333 54135 16414 14625 34334 13331 62423 11635 41462 52526 42121 32535 11513 32211 34261 14123 26313 21622 11351 13636 25112 23341 33312 23441 13461 63136 31543 62634 33562 22323 15266 23211 36414 62513 16521 12662 36254 24632 33223 44132 33321 61533 26143 34146 25343 33626 16223 44146 41331 22322 12162 11141 55334 11316 41331 33211 13333 43533 36546 23435 23344 23641 23262 51513 16356 23122 34413 23341 42412 32222 11261 11333 36364 11126 13361 61415 11513 22324 36411 13554 24343 52336 41111 31126 11232 24116 44223 44146 41331 31635 32332 23441 32162 12313 42412 31532 62121 62215 23363 44241 33132 23441 23413 54212 25332 44125 32422 61331 16326 24146 25414 24123 36264 24623 26333 65522 34414 13511 32362 23441 42341 11533 25362 32622 34412 32655 34351 62132 23243 43523 36414 23441 46252 53646 11364 15561 22344 11322 11261 61254 26251 12533 24413 31335 11464 14625 25161 43332 33141 13162 36322 32541 46252 51122 11263 33655 22344 13616 35154 51613 36411 12633 41462 51533 26142 32431 23143 43533 51162 62234 41343 32511 33323 32525 33321 64632 33244 51626 23343 33426 16263 33655 41462 56222 34413 43511 13332 23441 36113 13216 22321 16122 34414 64133 36332 23211 32556 13435 33152 32541 33131 12633 22344 16242 21162 21114 35113 25561 22344 12313 36162 23441 46413 36226 61122 32622 34413 21113 16252 33641 16354 13341 46253 13326 46112 61132 16343 31513 23213 21162 11333 54111 22344 11223 62365 52234 41221 15126 33423 43542 14331 63613 16412 32633 22344 12535 33131 11333 46163 53233 16322 34641 33132 23116 36232 63336 23364 11631 42411 62622 34413 63435 62211 63232 54441 31426 42122 34116 26223 44136 34356 22116 32325 44413 14264 21223 41163 12234 41411 13122 34411 34116 31323 34116 36343 56221 16323 25444 41332 11641 46256 21336 41131 63232 33153 32142 41233 41635 16153 33132 33244 21511 35232 61123 22314 24123 43333 24111 32111 21626 33363 21621 32331 43336 41354 26241 46254 13312 54263 43341 33253 21632 11512 34411 41333 13313 22344 12336 31543 62613 36162 43645 16325 43216 32115 12331 12542 64146 25131 61555 35112 24231 32162 32231 16323 23335 11363 43322 32111 64134 33152 63314 41462 51333 36332 51634 41234 54222 34411 32535 23133 33136 42462 51626 23462 33225 42346 21516 32234 55422 34411 11325 11346 15133 32162 53312 35543 34616 35252 53554 26323 34632 23455 44146 25133 61621 16413 32234 41464 13322 11311 63641 23262 23441 34163 54516 34414 21126 55323 32234 41121 62654 24313 32443 33324 11132 22344 13133 14351 13634 33223 21141 55262 35155 33122 34111 41162 65536 41351 13222 34412 54215 11221 11235 16266 23211 25333 53341 25232 43123 14414 62532 33133 34123 36411 16226 33322 23441 23363 66225 32422 62234 41363 22325 41462 51652 16131 21636 46421 33641 13162 23441 62131 63532 42263 66236 32331 31113 22163 13242 61212 32232 55414 625